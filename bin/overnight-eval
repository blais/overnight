#!/usr/bin/env python3
"""Earnings trading identification tool.

This tool produces a list of tradeable names with earnings AMC or BMO the
post-close and next day pre-open earnings announcements from companies in the US
equity space. Each term is inspected for desirable characteristics.
"""
__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

import argparse
import datetime
import logging

import ameritrade

from johnny.base.etl import petl
from overnight import earnings_pb2 as pb
from overnight import evaluate


# TODO(blais): Move this to a input file.
def initialize_default_config() -> pb.Config:
    """Create an initialize a default configuration."""
    config = pb.Config()

    # Earnings beyond 45 days are pretty useless (not enough vol contraction).
    config.max_dte = 60

    # Don't play too tight; we won't bother with any position with a delta of 20
    # or more.
    config.max_delta = 0.20

    # Don't trade stocks with less than 200k shares.
    config.volume_threshold = 200_000

    # Don't bother with positions that are too cheap; again, I wouldn't touch it
    # if it's not at least $0.70.
    config.min_strangle_credits = 0.40

    # Don't bother trading names with spreads 50% of the option value.
    config.max_spread_frac = 0.50

    # Don't look at strikes with no size.
    config.min_size = 1

    # A wide strangle ought to be at least 2x the expected move.
    config.strangle_em_width = 2.2

    return config


def main():
    # Parse args.
    parser = argparse.ArgumentParser()
    ameritrade.add_args(parser)

    parser.add_argument('symbols', nargs='*',
                        help='Symbols to process')

    parser.add_argument('--csv-filename', '-f', action='store',
                        help='CSV filename to read symbols from')

    parser.add_argument('-v', '--verbose', action='store_true')

    parser.add_argument('-r', '--rate-limit', action='store_true',
                        help="Turn on rate limitations for large lists")

    parser.add_argument('--output', action='store',
                        help='Output directory to write results to.')

    args = parser.parse_args()
    config = ameritrade.config_from_args(args)
    td = ameritrade.open(config)

    if args.verbose:
        logging.basicConfig(level=logging.INFO, format='%(levelname)-8s: %(message)s')

    # Initialize fixed configuration.
    # TODO(blais): Allow reading this from an input file.
    config = initialize_default_config()

    # Read a list of symbols.
    symbols = []
    if args.csv_filename:
        symbols_table = petl.fromcsv(args.csv_filename)
        symbols.extend(symbols_table.sort('Symbol').values('Symbol'))
    if args.symbols:
        symbols.extend(args.symbols)

    # Iterate through all the symbols and process them.
    earlist_all = pb.EarningsList()
    max_date = datetime.date.today() + datetime.timedelta(days=config.max_dte + 7)
    for symbol in symbols:
        logging.info(f",--{symbol}---------------------------------------------------------------")

        # Fetch the chain.
        chain_json = evaluate.fetch_chain(td, args.rate_limit,
                                          symbol=symbol,
                                          includeQuotes=True,
                                          toDate=max_date)

        # Handle errors.
        earnings = earlist_all.earnings.add()
        earnings.underlying = symbol
        if chain_json['status'] == 'FAILED' or 'callExpDateMap' not in chain_json:
            logging.warning(f"Could not get chain data for {symbol}")
            earnings.success = False
            earnings.diagnostics.append(f"ERROR: Could not get chain data for {symbol}")
            continue

        # Analyze and store results for a single earnings name.
        earnings.success = True
        earnings.CopyFrom(evaluate.analyze_earnings(chain_json, config))

    # Render output.
    if not args.output:
        print(earlist_all)
    else:
        evaluate.render_files(symbols, config, earlist_all, args.output)


if __name__ == '__main__':
    main()
